name: Backend Infrastructure Plan

on:
  pull_request:
    branches: [ "main" ]
    paths:
        - backend/**
        - infrastructure/backend/**
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_VERSION: '1.5.6'
  DOTNET_VERSION: '6.0.x'

jobs:
  plan-backend:
    name: Plan backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'infrastructure/backend/main'
    permissions:
      contents: read
      pull-requests: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish Lambda Services
      run: sh publish_lambda_services.sh
      working-directory: 'infrastructure/backend'

    - name: Use Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      continue-on-error: true

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true

    - name: Terraform Workspace
      run: terraform workspace select production

    - name: Terraform Plan
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Pull Request Comment
      uses: actions/github-script@v6
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          const output = `#### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>`;

          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: Terraform Status
      if: steps.plan.outcome == 'failure' || steps.validate.outcome == 'failure' || steps.init.outcome == 'failure' || steps.fmt.outcome == 'failure'
      run: exit 1
